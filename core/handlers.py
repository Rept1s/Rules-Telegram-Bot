import asyncio
from environs import Env
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery


class AlbumHandler:
    def __init__(self):
        self.album_end_tracker = defaultdict(list)
        self.album_locks = defaultdict(asyncio.Lock)

    async def check_album_and_send(self, message: Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–ª—å–±–æ–º–æ–º, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞.
        """
        if message.media_group_id:
            self.album_end_tracker[message.media_group_id].append(message.message_id)

            async with self.album_locks[message.media_group_id]:
                await asyncio.sleep(4)
                if self.album_end_tracker[message.media_group_id][-1] == message.message_id:

                    for msg_id in self.album_end_tracker[message.media_group_id]:
                        await message.bot.delete_message(message.chat.id, msg_id)
                    del self.album_end_tracker[message.media_group_id]
                    del self.album_locks[message.media_group_id]
                    await answer_message(message)
        else:
            await message.delete()
            await answer_message(message)


async def first_name(message: Message):
    """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏/—é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏/—é–∑–µ—Ä–Ω–µ–π–º–∞.
    """
    if message.from_user.first_name or message.from_user.full_name or message.from_user.username is not None:
        return (message.from_user.first_name + ',' or message.from_user.full_name + ','
                or message.from_user.username + ',')
    else:
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!'


async def answer_message(message: Message):
    """
        –ü—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞/–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
    """
    await message.bot.restrict_chat_member(message.chat.id, message.from_user.id, permissions=ChatPermissions(),
                                           until_date=datetime.timedelta(minutes=1))
    send_answer = await answer_message_check(message)
    await asyncio.sleep(180)  # 3 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –¥–∞–ª–µ–µ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ —Å–ø–∞–º–∞
    await send_answer.delete()


async def answer_message_check(message):
    if await select_check_id(message.from_user.id):
        return await message.answer(
            '<a href="tg://user?id=' + str(message.from_user.id) + '">' + str(await first_user_name(message.from_user))
            + '</a>' + ", –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ. üìù",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                text="‚ôªÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=Env().str("INVITE_LINK_BOT"))]]))
    return await message.answer(
        '<a href="tg://user?id=' + str(message.from_user.id) + '">' + str(
            await first_user_name(message.from_user)) + '</a>' +
        ", –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –±–æ—Ç–µ @"
        + Env().str("BOT_USERNAME") + ". üìù",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url=Env().str("INVITE_LINK_BOT"))]]))


async def subscribe_direct_message(message: Message):
    """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.
    """
    await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç—ã",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=link)] for link in
                             Env().list("INVITE_LINK_CHANNEL")] +
                             [[InlineKeyboardButton(text="‚ôªÔ∏è –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")]]))


async def rules_step(message: Message):
    """
        –ü—Ä–æ—Å–∏—Ç —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    """
    await message.answer('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url=Env().str("LINK_RULES"))],
                             [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="access_granted")],
                         ]))


async def access_granted(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    await call.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ')


async def start_next_step(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    await rules_step(call.message)


async def answer_not_subscribe(call: CallbackQuery):
    await call.answer()
    answer = await call.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!')
    await asyncio.sleep(60)
    await answer.delete()
